---
title: "CaseStudy"
format: html
editor:
---


This is my Case study using on the Bellabeat fitbit fitness tracker dataset using R. Here i will preform real-world task of a junior data analyst.

BellaBeat is a high-tech manufacturer of health-focused products for women. Bellabeat is a successful small company founded by, Urska Srsen and Sando Mur, who believe that by collecting data on activity, sleep and stress their technology can inform, inspire and empower women around the world with knowledge about their own health and habits. Founded in 2013 Bellabeat grew rapidly and by 2016 had opened offices around the world with mulitible products.

I have been asked to analyze smart device usage in order to gain insight into how customers use there non-Bellabeat Smart devices.

The main insights I was asked to find our as follows:

-   What are some trends in smart device usage?

-   How could these trends apply to Bellabeat customers?

-   How could these trends help influence Bellabeat marketing strategy?

    Using these questions I will find trends in smart device usage by finding what customers used their devices for the most. I will also look to see if time of day is a factor in usage as well. I will also find trends within the most active users and show how many ways customers can use their smart devices'. Using these findings I will find ways we can get our customers to be more active and gather new ones.

The data comes from Kaggle([FitBit Fitness Tracker Data](https://www.kaggle.com/datasets/arashnic/fitbit)) and is license by CC0 :Public Domain By user name Mobius. Using this data I have downloaded from Kaggle, I will run an analysis Over the usage of 30 customers from (4/12/2016) April 12th, 2016, til (5/12/2016) March 12th, 2016.

The data contains daily activity for 30 days following our 33 customers showing us Activity time, Sleep values, Step count, Calories and MET values. This data only contains females records.

I will start by bringing the data in to see what we are working with and start cleaning it. I will download packages to start cleaning and plotting the data. The data is in a .cvs file type a comma separated values.

```{r}
install.packages("tidyverse")
install.packages("readxl")
install.packages("hms")
install.packages("units")
install.packages("here")
install.packages("skimr")
install.packages("janitor")
```

```{r}
library("tidyverse")
library("conflicted")
library("hms")
library("units")
library("dplyr")
library("lubridate")
library("here")
library("skimr")
library("janitor")
conflict_prefer("filter", "dplyr")
conflict_prefer("lag", "dplyr")
```

#### Data downloading and cleaning

Out of the 18 excel files of data i will only be using 4 for this analysis. I'm only using these 4 because these 4 contain either data that is also in the other files or have data that is not in other files.

i will use dailyactivies_merged which has

-   Id - to identify users

-   Date -date of activites

-   Total daily steps

-   Total distance

-   Tracked distance

-   Activity distance measured by Very, Moderately, light and Sedentary active distance

-   Activity time by Very, Moderately, Light and Sedentary minutes during the day

-   Total Calories per day

-   Logged Actives - users who logged their distance by the day

    I will also use Sleep_daily

-   Id

-   Day and time the date reset

-   Sleep Value

-   Total minutes in bed

-   Total minutes Asleep

    The 3rd dataset I will use is WeightLog which only has 8 user Id's

-   Id

-   Date and time of log

-   Weight in kgs

-   Weight in Pounds

-   Fat

-   BMI

-   IsManualReport - if users manually made this report

-   Logid

    The last data I will use is Hourly steps

-   Id

-   Activityhour

-   Step total

Using what we know above Our Id column is in all our data sets and I will use this to join data together after is in cleaned.

```{r}
#here I am importing the files I will be using and naming them.

dailyActivity <- read.csv("C:\\Users\\AnnaP\\Desktop\\Case Study\\Fitabase Data 4.12.16-5.12.16\\dailyActivity_merged.csv")

sleepActivity <- read.csv("C:\\Users\\AnnaP\\Desktop\\Case Study\\Fitabase Data 4.12.16-5.12.16\\sleepDay_merged.csv")

weightLog <- read.csv("C:\\Users\\AnnaP\\Desktop\\Case Study\\Fitabase Data 4.12.16-5.12.16\\weightLogInfo_merged.csv")

hourlysteps <- read.csv("C:\\Users\\AnnaP\\Desktop\\Case Study\\Fitabase Data 4.12.16-5.12.16\\hourlySteps_merged.csv")
```

Now we have our 3 dataframes named dailyActivity, sleepActivity and weightLog. I will now look at them and clean them

```{r}
head(dailyActivity)
```

Date is being recognized as a character and i will change it to a date.

```{r}
colnames(dailyActivity)
```

```{r}
head(sleepActivity)
colnames(sleepActivity)
```

Date will need to be adjusted here as well.

```{r}
head(weightLog)
colnames(weightLog)
```

```{r}
head(hourlysteps)
colnames(hourlysteps)
```

```{r}
n_distinct(dailyActivity$Id)
n_distinct(sleepActivity$Id)
n_distinct(weightLog$Id)
n_distinct(hourlysteps$Id)
```

Each datarframe I have has a different number of users except daily and hourly steps

```{r}
nrow(dailyActivity)
nrow(sleepActivity)
nrow(weightLog)
nrow(hourlysteps)
```

```{r}
ncol(dailyActivity)
ncol(sleepActivity)
ncol(weightLog)
ncol(hourlysteps)
```

I will now do a quick summary of the data

```{r}
dailyActivity %>% select(
  TotalSteps,
  TotalDistance,
  SedentaryMinutes
) %>% summary()
```

The average steps per day is 7406 which is lower than what is recommend at 10,000 steps per day. source:How many steps/day are enough? Preliminary pedometer indices for public health by David Bassett

I will add a new column to show different levels based off of Steps to Quickly determine how actives users are based off of David Bassett's findings

| Steps per day | Physical activity level |
|---------------|-------------------------|
| \<5000        | Sedentary lifestyle     |
| 5000-7499     | Low active              |
| 7500-9999     | Somewhat active         |
| \>=10 000     | Active                  |
| \>=12 500     | Highly active           |

The average distance walked in a day is 5.245 in miles which is good since walking over 5miles a day is beneficial for maintaining a healthy weight.

The Sedentary Minutes (time spent sitting) 991.2 mins or 16 hours and 52 mins

I am saying miles because

If we consider the general conversion, 1 mile is roughly equal to 2,000 steps (this can vary based on stride length, but it's a common average). Since we don't have height we will assume the users are all average height

An example of the math , on April 19, the total_steps is 15,506 and the total_distance is 9.88. This fits with the conversion because 15506 steps divided by 9.88 miles is approximately 1,570 steps per mile, which aligns well with average step counts.

```{r}
sleepActivity %>% select(
  TotalSleepRecords,
  TotalMinutesAsleep,
  TotalTimeInBed
) %>% summary()
```

On average The SleepvRecords or Sleep value is 1, which tells me our users aren't getting a good night sleep.

Average Minutes asleep is 419.5 or 7hrs

Total time in bed average is 458.6 or 7 hours and 39mins

So the users aren't getting the recommended 8 hours of sleep.

```{r}
weightLog %>% select(
  WeightPounds,
  BMI
) %>%  summary()
```

The average Weight in pounds is 158.8 and that is lower than 170.8 pounds according to Average Weight For Women: Healthy Ranges – Forbes Health, written by Amy Mackelden

```{r}
hourlysteps %>% select(
  StepTotal
) %>% summary()
```

Average Steps is 320.2 steps which when I take the recommended steps of 10,000 / 24(for hours in a day) 417 steps per hour is the average they should be meeting.


```{r}

Daily2 <- dailyActivity %>% 
  rename(date =ActivityDate) %>%
  mutate(
    date = as_date(date, format= "%m/%d/%Y")
  )
```

```{r}
#to check
glimpse(daily2)
```

Now for the others

```{r}


Sleep2 <- sleepActivity %>% 
  rename(date = SleepDay) %>% 
  mutate(
    date = as_datetime(date, format= "%m/%d/%Y %H:%M:%S")
  )
```

there is an error lets check the data

```{r}
# Check rows where date couldn't be parsed
failed_rows <- sleepActivity[is.na(
  as_datetime(
    sleepActivity$SleepDay, format="%m/%d/%Y %H:%M:%S")), ]

head(failed_rows)

```

```{r}
 #will trim and try again

Sleep2 <- sleepActivity %>% clean_names()

Sleep2 <- sleepActivity %>% 
  rename(date = SleepDay,
         SleepValue = TotalSleepRecords) %>% 
  mutate( date =str_trim(date),
    date = parse_date_time(date,
                           orders = c("%m/%d/%Y %H:%M:%S", "%m/%d/%Y"))
  )
  
```

```{r}
glimpse(sleep2)
```

```{r}

Weight2 <- weightLog %>% 
  rename(date = Date) %>% 
  mutate(date = parse_date_time(date,
                          orders =c ("%m/%d/%Y %H:%M:%S", "%m/%d/%Y")))
  
```

```{r}
glimpse(weight2)
```

```{r}
Hourly2 <- hourlysteps %>% 
  rename(StepbyHour = StepTotal) %>% 
  mutate(ActivityHour = parse_date_time(ActivityHour,
                              orders = c ("%m/%d/%Y %H:%M:%S","%m/%d/%Y" )))
```

```{r}
glimpse(Hourly2)
```

Our col Fat has Alot of na's. without ages of our users and their heights I can not run a calculation to find out the other users information. In a job setting I would ask if this information is available and explain why I would like to use it in my analysis.

```{r}
sum(duplicated(Daily2))
sum(duplicated(Sleep2))
sum(duplicated(Weight2))
sum(duplicated(Hourly2))
```

```{r}
duplicates <- sleep2[duplicated(sleep2), ]
print(duplicates)
```

```{r}
duplicates2 <- Hourly2[duplicated(Hourly2), ]
print(duplicates2)
```

```{r}
Daily2 <- Daily2 %>%  clean_names()
Sleep2 <- Sleep2 %>%  clean_names()
Hourly2 <- Hourly2 %>%  clean_names()
Weight2 <- Weight2 %>%  clean_names()
```

```{r}
colnames(Daily2)
colnames(Sleep2)
colnames(Hourly2)
colnames(Weight2)
```

```{r}
Totalavgsteps <- Daily2 %>% 
  group_by(id) %>% 
  summarize(avgTotalsteps = mean(total_steps))
head(Totalavgsteps)
```

```{r}
UserActivites <- Totalavgsteps %>% 
  mutate(activityLevel = case_when(
    avgTotalsteps < 5000 ~ "Sedentary lifestlye",
    avgTotalsteps >= 5000 & avgTotalsteps < 7500 ~ "Low active",
    avgTotalsteps >= 7500 & avgTotalsteps < 9999 ~ "Somewhat active",
    avgTotalsteps >= 10000 & avgTotalsteps < 12500 ~ "Active",
    avgTotalsteps >= 12500 ~ "Highly active"
  ))

head(UserActivites)
```

```{r}
Totalavgsteps <- Totalavgsteps %>% clean_names()
UserActivites <- UserActivites %>%  clean_names()
colnames(Totalavgsteps)
colnames(UserActivites)
```

```{r}
Daily2 <- Daily2 %>% mutate(
  dayofweek = wday(date, label = TRUE, abbr = FALSE)
)
colnames(Daily2)
```



```{r}
Daily2 %>% ggplot(
  aes(
    x = TotalSteps, y = SedentaryMinutes
  )
) + geom_point(aes( color = TotalSteps)) + geom_smooth(method = "lm", col = "purple") + theme_minimal() + labs(
  title = "Correlation Between Steps Taken and Sedentary Time",
   x = "Total steps taken",
  y = "Time spent sitting (minutes)"
)

```



    ```{r}
    Sleep2 %>% ggplot(
      aes(
        x = total_minutes_asleep, y =total_time_in_bed
      )
    ) + geom_point() + theme_minimal() + labs(
      title = "Time spent in bed vs time being asleep",
      x = "Time spent alseep", 
      y= "Total time in bed"
    )
    ```

```{r}
Daily2 %>% ggplot(aes(
  x = dayofweek, y = total_steps 
)) + geom_col() + theme_minimal() + labs(
  title = "Steps by day of the Week",
  x = "Day of the week",
  y = "Total steps taken"
)
```

```{r}
#does time of day matter
 
timeofdata <- Hourly2 %>% 
  group_by(hour = format(as.POSIXct(activity_hour), "%H")) %>% summarise(avg_steps = mean(stepby_hour, na.rm = TRUE))
```

```{r}
timeofdata %>%  ggplot(aes(
  x =as.numeric(hour), y = avg_steps
)) + geom_line(color="purple") +geom_point(size = 1) + theme_minimal()+ labs(
  title = "Average Steps by Hour",
  x = "Hour of day",
  y = "Average Steps"
)
```

```{r}
Daily2 %>% ggplot(aes(
  x = total_steps, y= calories
)) + geom_line() + theme_minimal() + labs(
  title = "Total steps and Calories lost",
  x = "Total steps",
  y = "Calories lost"
)
```

### Merging data for more analysis

```{r}

DailyMergSleep <- merge(Daily2, Sleep2, by = c("id","date"), all = TRUE)
```

```{r}
#geting rid of na's so i can plot
#not wantint to chang our combined data

DailyMergSleep2 <- DailyMergSleep %>%
  filter(!is.na(total_steps) & !is.na(total_minutes_asleep))

DailyMergSleep2 %>% ggplot(
  aes(x = total_steps, y = total_minutes_asleep)) +
  geom_point() +
  geom_smooth(method = "lm", col = "purple") + 
  theme_minimal() +
  labs(
    title = "Total Steps vs Total Minutes Asleep", 
    x = "Total Steps", 
    y = "Total Minutes Asleep")

```

```{r}
DailyMergSleep %>% ggplot(
  aes(x = total_steps, y = total_minutes_asleep, color = dayofweek)) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  labs(
    title = "Total Steps vs Total Minutes Asleep by Day of the Week", 
    x = "Total Steps", 
    y = "Total Minutes Asleep")

```

```{r}

DailyMergSleep <- full_join(UserActivites,DailyMergSleep, by = "id")
```

```{r}
DailyMergSleep %>% ggplot(
  aes(
    x = activity_level, y = total_minutes_asleep, fill = activity_level)) + geom_boxplot() + labs(
      title = "Sleep Duration by Step Category",
      x = "Step Category",
      y = "Total Minutes Asleep") +
  theme(legend.position = "none")
```

```{r}
Weight2 <- Weight2 %>% separate(
  date, into = c("date", "time"), sep = " "
)


```

```{r}
Weight2 <- Weight2 %>% select(-time, -log_id)
```

```{r}
DailyMergSleep <- full_join(Weight2, DailyMergSleep ,by=  "date")
```

```{r}
#weight vs steps
DailyMergSleep %>% ggplot(aes(
  x = total_steps, y= weight_kg
)) + geom_point() + geom_smooth(method = "lm", color = "purple") + labs(
  title = "Weight vs Total steps",
  x = "Total steps",
  y = "Weight in Kg"
)
```

```{r}
DailyMergSleep %>%  ggplot(
  aes(
    x = activity_level.x , y = bmi, fill = activity_level.x)) + geom_boxplot() + labs(
      title = "BMI vs. Activity Level",
      x = "Activity Level",
      y = "BMI")
```

```{r}
DailyMergSleep %>% ggplot(aes(
  x = activity_level.x, y= calories
)) + geom_boxplot() + labs(
  title = "Calories burned vs Activity level",
  x = "Activitiy level",
  y = "Calories"
)
```

```{r}
DailyMergSleep %>% ggplot(aes(
  x = dayofweek, y= total_steps, fill = activity_level.x
)) + geom_bar(stat = "identity", position = "dodge") + labs(
  title = "Average Steps by Day of the Week",
  x = "Day of week",
  y = "Total steps",
  fill = "Activity level"
)
```

```{r}
DailyMergSleep %>% ggplot(aes(
  x = very_active_minutes, y= calories
)) + geom_point() + geom_smooth(method = "lm", color="purple") + labs(
  title = "Very active minutes vs calories burned",
  x = "Very active minutes",
  y = "Calories"
)
```

```{r}
UserActivites %>% ggplot(aes(
  x = activity_level, y= avg_totalsteps
)) + geom_col()
```

 


